package com.maigo.cloud.service;

import com.maigo.cloud.dao.NotificationDAO;
import com.maigo.cloud.model.Notification;
import com.maigo.cloud.model.User;
import com.maigo.cloud.network.Session;
import com.maigo.cloud.xmpp.IQNotification;

import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public class NotificationService
{
    private UserService userService;
    private SessionService sessionService;

    private NotificationDAO notificationDAO;

    /**
     * @key stanzaId in IQNotification
     * @value id in Notification Table generated by Hibernate
     */
    private Map<String, String> pushNotificationIdsMap = new ConcurrentHashMap<String, String>();

    public void setUserService(UserService userService)
    {
        this.userService = userService;
    }

    public void setSessionService(SessionService sessionService)
    {
        this.sessionService = sessionService;
    }

    public void setNotificationDAO(NotificationDAO notificationDAO)
    {
        this.notificationDAO = notificationDAO;
    }

    /**
     * send a notification to a user. The notification will be saved in the database and
     * wait for an ack to confirm. The un-confirm notifications will be send to the user
     * again when the user login at the next time.
     * @param notification
     * @return if the user to send is exist
     */
    public boolean sendNotification(Notification notification)
    {
        String username = notification.getUsername();
        User user = userService.getUserByUsername(username);
        if(user == null)
            return false;

        String notificationId = notificationDAO.addNotification(notification);

        Session session = sessionService.getSessionBindWithUser(user);
        if(session != null)
        {
            String stanzaId = getRandomStanzaID();
            pushNotificationIdsMap.put(stanzaId, notificationId);

            IQNotification iqNotification = new IQNotification();
            iqNotification.setId(stanzaId);
            iqNotification.setType("set");

            iqNotification.setTitle(notification.getTitle());
            iqNotification.setContent(notification.getContent());

            session.sendStanza(iqNotification);
        }

        return true;
    }

    /**
     * send the notifications stored while the user is offline. The notification will not be
     * saved into database since it is already there.
     * @param user
     */
    public void sendOfflineNotificationsToUser(User user)
    {
        Session session = sessionService.getSessionBindWithUser(user);
        if(session == null)
            return;

        List<Notification> notificationList = notificationDAO.getOfflineNotificationList(user);
        for(Notification notification : notificationList)
        {
            String stanzaId = getRandomStanzaID();
            pushNotificationIdsMap.put(stanzaId, String.valueOf(notification.getId()));

            IQNotification iqNotification = new IQNotification();
            iqNotification.setId(stanzaId);
            iqNotification.setType("set");
            iqNotification.setTitle(notification.getTitle());
            iqNotification.setContent(notification.getContent());

            session.sendStanza(iqNotification);
        }

        System.out.println("[Debug]NotificationService: send " + notificationList.size() + " off-line notifications to user " +
                user.getUsername());
    }

    public void confirmNotification(String stanzaId)
    {
        String notificationId = pushNotificationIdsMap.get(stanzaId);
        if(notificationId == null)
            return;

        Notification notification = notificationDAO.getNotification(notificationId);
        notification.setConfirmed(true);
        notificationDAO.updateNotification(notification);

        System.out.println("[Debug]NotificationService: confirm Notification title = " + notification.getTitle()
                + " content = " + notification.getContent());
    }

    private String getRandomStanzaID()
    {
        return UUID.randomUUID().toString().replace("-", "");
    }
}
